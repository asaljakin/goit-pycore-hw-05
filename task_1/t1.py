# Завдання 1

# Замикання в програмуванні - це функція, яка зберігає посилання на змінні зі свого лексичного контексту, тобто з області, де вона була оголошена.
# Реалізуйте функцію caching_fibonacci, яка створює та використовує кеш для зберігання і повторного використання вже обчислених значень чисел Фібоначчі.
# Ряд Фібоначчі - це послідовність чисел виду: 0, 1, 1, 2, 3, 5, 8, ..., де кожне наступне число послідовності виходить додаванням двох попередніх членів ряду.
# Це завдання можна вирішити рекурсивно, викликаючи функцію, що обчислює числа послідовності доти, доки виклик не сягне членів ряду менше n = 1, де послідовність задана.

# Вимоги до завдання:

# Функція caching_fibonacci() повинна повертати внутрішню функцію fibonacci(n).
# fibonacci(n) обчислює n-те число Фібоначчі. Якщо число вже знаходиться у кеші, функція має повертати значення з кешу.
# Якщо число не знаходиться у кеші, функція має обчислити його, зберегти у кеш та повернути результат.
# Використання рекурсії для обчислення чисел Фібоначчі.

def caching_fibonacci():
    # Створення порожнього словника cache для зберігання обчислених значень
    cache = {}

    def fibonacci(n):
        # Обробка базових випадків
        if n <= 0:
            return 0
        if n == 1:
            return 1

        # Перевірка, чи значення вже є у cache
        if n in cache:
            return cache[n]

        # Обчислення n-го числа Фібоначчі та збереження у cache
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]

    return fibonacci

# Приклад використання
# Отримуємо функцію fibonacci
fib = caching_fibonacci()

# Використовуємо функцію fibonacci для обчислення чисел Фібоначчі
print(fib(10))  # Виведе 55
print(fib(15))  # Виведе 610
